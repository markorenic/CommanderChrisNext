name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix)'
        required: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: chris
            asset_name: chris-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: chris
            asset_name: chris-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: chris
            asset_name: chris-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: chris
            asset_name: chris-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: chris.exe
            asset_name: chris-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: build-${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare asset
        shell: bash
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
            chmod +x release/${{ matrix.asset_name }}
          fi

      - name: Calculate checksums
        shell: bash
        working-directory: release
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ matrix.asset_name }} SHA256 > ${{ matrix.asset_name }}.sha256
          else
            shasum -a 256 ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/${{ matrix.asset_name }}
            release/${{ matrix.asset_name }}.sha256
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: .github/changelog-configuration.json
          failOnError: false
          commitMode: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            Download the appropriate binary for your platform and architecture.
            
            ### Linux/macOS
            ```
            chmod +x chris-*
            sudo mv chris-* /usr/local/bin/chris
            ```
            
            ### Windows
            Download and run the executable directly, or add it to your PATH.
            
            ## Checksums
            SHA256 checksums are provided for each binary file.
            
            ## Documentation
            Full documentation is available at https://markorenic.github.io/CommanderChrisNext/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: publish
      
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }} 